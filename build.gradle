apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'

description = 'A JVM-compatible Ada implementation'
group = 'com.github.berriedale'
version = '0.0.1'
defaultTasks 'check', 'assemble'

repositories {
    jcenter()
}

configurations {
    antlr
}

dependencies {
    compile 'org.antlr:antlr4:[4.5.1,5.0)'
    compile 'org.ow2.asm:asm:[5.0.4,6.0)'
    compile 'org.codehaus.groovy:groovy:[2.4.5,2.5)'

    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
    testCompile 'cglib:cglib-nodep:[3.1,4.0)'

    antlr 'org.antlr:antlr4:[4.5.1,5.0)'
}

sourceSets {
    main {
        java {
            srcDirs += "${buildDir}/grammars"
            exclude '**/*.swp'
        }
        groovy {
            exclude '**/*.swp'
        }
    }
}

task buildGrammars(type: JavaExec) {
    File outputDirectory = file("${buildDir}/grammars")
    File inputDir = file("${projectDir}/src/main/grammars")
    outputDirectory.mkdirs()

    group 'Build'
    description 'Use Antlr4 to compile grammars to Java files'
    classpath configurations.antlr
    main 'org.antlr.v4.Tool'
    args "${inputDir}/Ada.g4",
        '-package', 'com.github.berriedale.grammars',
        '-lib', inputDir,
        '-Werror', '-o', outputDirectory.absolutePath

    inputs.source fileTree(inputDir).include('*.g4')
    outputs.dir outputDirectory
}
classes.dependsOn buildGrammars

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat "full"
    }
}
assemble.dependsOn check

plugins.withType(JavaPlugin) {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7


    project.tasks.withType(JavaCompile) { task ->
        task.sourceCompatibility = project.sourceCompatibility
        task.targetCompatibility = project.targetCompatibility
    }

    project.tasks.withType(GroovyCompile) { task ->
        task.sourceCompatibility = project.sourceCompatibility
        task.targetCompatibility = project.targetCompatibility
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    dependsOn javadoc
    classifier = 'javadoc'
    from javadoc.destinationDir
}

assemble.dependsOn sourcesJar, javadocJar

artifacts {
    archives sourcesJar
    archives javadocJar
}

